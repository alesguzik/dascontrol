#!/usr/bin/env bash
RECDIR="$HOME/records"
REC_PIDFILE="$RECDIR/.rec-pid"
PLAY_PIDFILE="$RECDIR/.play-pid"
NOTIFY_TRANSCODED="1"
PREVIEW_LEN=20

if [ ! "$1" ]; then
    echo "  usage: $(basename "$0") <command> [args]
Supported commands (N defaults to 1 (last record)):
    rec            - Starts note recording. After recording spawns transcoding process.
    list           - Lists notes and up 20 characters of transcoding preview.
    play   [N]     - Plays record number N.
    cat    [N]     - Displays transcoding of record N.
    delete [N|all] - Deletes record N.
    key-rec        - Starts and stops recording. Bind it to some hotkey.
    key-play       - Starts and stops playing. Bind it to some other key."
    exit 1
fi

CMD="$1"
shift
FILENAME="$RECDIR/$(date '+%Y-%m-%d_%H-%M-%S_%s').ogg"

function list_records {
    find "$RECDIR" -name '*.ogg' -type f|sort -r
}

function nth_record {
    if [ "$1" ]; then
        INDEX="$1"
    else
        INDEX="1"
    fi
    list_records|head -n "$INDEX"|tail -n 1
}

function text_file {
    echo "$1"|sed 's/.ogg$/.txt/'
}

function try_transcode {
    if [ "$2" ]; then
        OUT="$2"
    else
        OUT="$(text_file "$1")"
    fi
    sox "$1" -q --rate 16000 -t flac - 2>/dev/null| curl --data-binary @- --header 'Content-type: audio/x-flac; rate=16000' 'https://www.google.com/speech-api/v1/recognize?lang=ru-RU&client=chromium' 2>/dev/null | tee /dev/tty|jshon -e hypotheses -e 0 -e utterance -u > "$OUT"
}

function notecat {
    cat "$(text_file "$(nth_record "$1")")"
}

function noteplay {
    play "$(nth_record "$1")"
}

function delete_note_pipe {
    while read FILE; do
        rm "$(text_file "$FILE")"
        rm "$FILE"
    done
}

function notedelete {
    if [[ "$1" == "all" ]]; then
        list_records|delete_note_pipe
    else
        rm "$(text_file "$(nth_record "$1")")"
        rm "$(nth_record "$1")"
    fi
}

function files_to_descriptions {
    while read FILE; do
        basename "$FILE"|awk -F _ '{gsub("-",":",$2);printf("%s %s ",$1,$2)}'
        DESC="$(cat "$(text_file "$FILE")"|head -1|cut -c "1-$PREVIEW_LEN")"
        LEN="$(echo -n "$DESC"|wc -c)"
        case "$LEN" in
            0)
                echo "<no text>"
                ;;
            "$PREVIEW_LEN")
                echo "($DESC...)"
                ;;
            *)
                echo "($DESC)"
                ;;
        esac
    done
}

function notelist {
   list_records|files_to_descriptions|cat -n 
}

function noterec {
    echo -n "Recording... "
    rec -q "$FILENAME"
    echo done
    echo -n "Trying to transcode... "
    try_transcode "$FILENAME" && echo done || echo fail
    notecat
}

function beep_sin {
    play -q -n synth sin 440 fade 0 0.1 0
}

function beep_triangle {
    play -q -n synth triangle 440 fade 0 0.1 0
}

function beep_square {
    play -q -n synth square 440 fade 0 0.1 0
}

function notekeyrec {
    if [[ -f "$REC_PIDFILE" ]]; then
        kill "$(cat "$REC_PIDFILE")" || true
        rm "$REC_PIDFILE"
        beep_triangle
        (
        try_transcode "$(nth_record)"
        [[ "$NOTIFY_TRANSCODED" ]] && beep_square
        ) &
    else
        beep_sin
        rec -q "$FILENAME" &
        echo $! > "$REC_PIDFILE"
    fi
}

function try_kill_beep {
    PIDFILE="$1"
    if [[ -f "$PIDFILE" ]]; then
        PID="$(cat "$PIDFILE")"
        rm "$PIDFILE"
        kill "$PID" 2>/dev/null || true
        beep_triangle
    fi
}

function notekeyplay {
    if [[ -f "$PLAY_PIDFILE" ]]; then
        try_kill_beep "$PLAY_PIDFILE"
    else
        beep_sin
        (
            play -q "$(nth_record)" &
            PID="$!"
            echo "$PID" > "$PLAY_PIDFILE"
            wait "$PID"
            try_kill_beep "$PLAY_PIDFILE"
        ) &
    fi
}

case "$CMD" in
    "rec")
        noterec
        ;;
    "play")
        noteplay "$1"
        ;;
    "cat")
        notecat "$1"
        ;;
    "delete")
        notedelete "$1"
        ;;
    "key-rec")
        notekeyrec
        ;;
    "key-play")
        notekeyplay
        ;;
    "list")
        notelist
        ;;
    *)
        echo "unknown command \"$CMD\"" 1>&2
        exit 1
        ;;
esac
exit 0

